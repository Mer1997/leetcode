/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        if(lists.size() == 1) return lists[0];
        if(lists.size() == 0) return NULL;

        //补全链表的个数为偶数
        ListNode* t = NULL;
        if(lists.size() % 2) lists.push_back(t);
        
        
        vector<ListNode*> c_lists;
        for(int i = 0; i != lists.size(); i+=2){
            ListNode head(0);
            t = &head;
        
            //归并链表
            while(lists[i] != NULL && lists[i+1] != NULL){
                if(lists[i]->val < lists[i+1]->val){ t->next = lists[i]; lists[i] = lists[i]->next;}
                else{ t->next = lists[i+1]; lists[i+1] = lists[i+1]->next;}
                t = t->next;
            }
            while(lists[i] != NULL) { t->next = lists[i]; lists[i] = lists[i]->next; t = t->next;}
            while(lists[i+1] != NULL) { t->next = lists[i+1]; lists[i+1] = lists[i+1]->next; t = t->next;}
            
            //插入归并后的链表
            c_lists.push_back(head.next);
            t = &head;
        }
        
        //继续归并
        return mergeKLists(c_lists);
    }
};

