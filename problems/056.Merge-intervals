/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
const static auto io_sync_off = [](){ std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return nullptr;}();
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if(intervals.size() < 2) return intervals;
        auto lambda = [](auto a, auto b) { return a.start < b.start; };
        sort(intervals.begin(), intervals.end(), lambda);
        vector<Interval> res_;
        int left = -1;
        int right = -1;
        for(auto now: intervals){
            if(left == -1){
                left = now.start;
                right = now.end;
            }else if(right >= now.start && right <= now.end){
                right = now.end;
            }else if(right >= now.start && right >= now.end){
                continue;   
            }else {
                Interval t(left, right);
                res_.push_back(t);
                left = now.start;
                right = now.end;
            }
        }
        Interval t(left, right);
        res_.push_back(t);
        return res_;
    }
};
