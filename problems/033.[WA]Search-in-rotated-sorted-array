const static auto io_sync_off = [](){
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    return nullptr;
}();
class Solution {
public:
    /*  binary search, give up one range between [left, mid) and [mid+1, right) use the rule that changed.
        first, we use mid to divided the range [left, right), and wherever the index of rotated begin, 
        the element must be dividing the range to two range, such as [left, rotated) and [rotated, mid) if the element is in the range [left, mid). 
        So we add one judging if the target < nums[left] when the target < num[mid], choice another range, 
        that's a way we can give up a half range when every search like traditional binary search.
    */
    
    int binaryRotated_(vector<int> &nums, const int target, const int left, const int right){
        if( left == right ) return -1;
        
        int mid = left + (right - left)/2;
	
        if(nums[mid] == target) return mid;
        else if(nums[mid] < target){
            if(target > nums[right-1] && nums[mid] <= nums[right-1]) 
                return binaryRotated_(nums, target, left, mid);
            else return binaryRotated_(nums, target, mid+1, right);
        }else{
            if(target >= nums[left] || nums[mid] < nums[right-1])
                return binaryRotated_(nums, target, left, mid);
            else return binaryRotated_(nums, target, mid+1, right);
        }	
    
    
    }
    
    int search(vector<int>& nums, int target) {
        return binaryRotated_(nums, target, 0, nums.size());
    }
};

class Solution {
public:
    //binary search, if the range of nums between left and right isn't sorted, divided search both these two ranges
    int binaryRotated_(vector<int> &nums, const int target, const int left, const int right){
        if( left != right ) return -1;
        
        int mid = left + (right - left)/2;
        
        if(nums[mid] == target) return mid;
        else if(nums[mid] < target && nums[left] < nums[right]){
            return binaryRotated_(nums, target, mid+1, right);
        }else if(nums[mid] > target && nums[left] < nums[right]){
            return binaryRotated_(nums, target, left, mid);
        }else{
            int f1 = binaryRotated_(nums, target, left, mid);
            int f2 = binaryRotated_(nums, target, mid+1, right);
            if(f1 != -1) return f1;
            else return f2;
        }
    }
    
    int search(vector<int>& nums, int target) {
        return binaryRotated_(nums, target, 0, nums.size());
    }
};
？？？结束
